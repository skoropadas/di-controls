[
  {
    "breadcrumbs": [
      "Examples",
      "Checkbox"
    ],
    "pageType": "guide",
    "title": "Checkbox",
    "section": "Checkbox",
    "route": "/examples/checkbox",
    "fragment": "checkbox",
    "content": "In this section, we will discuss creating a checkbox and checkbox group using this library. To start, let's outline the list of requirements and necessary components."
  },
  {
    "breadcrumbs": [
      "Examples",
      "Checkbox"
    ],
    "pageType": "guide",
    "title": "Checkbox",
    "section": "The checkbox should consist of the following components",
    "route": "/examples/checkbox",
    "fragment": "the-checkbox-should-consist-of-the-following-components",
    "content": "‚öôÔ∏è Checkbox group‚öôÔ∏è Checkbox provided from external sources using ng-content"
  },
  {
    "breadcrumbs": [
      "Examples",
      "Checkbox"
    ],
    "pageType": "guide",
    "title": "Checkbox",
    "section": "List of requirements",
    "route": "/examples/checkbox",
    "fragment": "list-of-requirements",
    "content": "üö© Checkbox should be provided via ng-content.üö© When an item from the list is selected, its value should be added to the checkbox group's model.üö© When an item from the list is deselected, its value should be removed from the checkbox group's model.üö© If checkbox group's model is changed, the checkbox should be selected or deselected.üö© The checkbox should support working with immutable objects."
  },
  {
    "breadcrumbs": [
      "Examples",
      "Checkbox"
    ],
    "pageType": "guide",
    "title": "Checkbox",
    "section": "Checkbox",
    "route": "/examples/checkbox",
    "fragment": "checkbox-1",
    "content": "The checkbox is a state control, and the user should have the ability to freely change its state from checked to unchecked and vice versa. To implement the state control, we need to inherit it from DIStateControl, which will provide us with all the necessary functionality. Internally, we will also use a native input type=\"checkbox\" to maintain the native behavior. For example, when a checkbox is used inside a label tag, it should change its state when the label is clicked. We also need to inject DICompareHost to access the compareFn from the checkbox group in the future. This function will help us compare immutable objects."
  },
  {
    "breadcrumbs": [
      "Examples",
      "Checkbox"
    ],
    "pageType": "guide",
    "title": "Checkbox",
    "section": "Checkbox Group",
    "route": "/examples/checkbox",
    "fragment": "checkbox-group",
    "content": "The checkbox group should contain a list of all selected values and update the state of child controls. To implement the group, we need to inherit our component class from the DICollectionControl class. DICollectionControl has additional integration with DIStateControl and by default implements the DICompareHost interface. Therefore, all we need to do is provide it as a host control and as a DICompareHost."
  },
  {
    "breadcrumbs": [
      "Examples",
      "Combobox"
    ],
    "pageType": "guide",
    "title": "Combobox",
    "section": "Combobox",
    "route": "/examples/combobox",
    "fragment": "combobox",
    "content": "In this section, we will discuss creating a combobox using this library. To start, let's outline the list of requirements and necessary components."
  },
  {
    "breadcrumbs": [
      "Examples",
      "Combobox"
    ],
    "pageType": "guide",
    "title": "Combobox",
    "section": "The combobox should consist of the following components",
    "route": "/examples/combobox",
    "fragment": "the-combobox-should-consist-of-the-following-components",
    "content": "‚öôÔ∏è Input field‚öôÔ∏è Dropdown‚öôÔ∏è List of items provided from external sources using ng-content that will be displayed in the dropdown"
  },
  {
    "breadcrumbs": [
      "Examples",
      "Combobox"
    ],
    "pageType": "guide",
    "title": "Combobox",
    "section": "List of requirements",
    "route": "/examples/combobox",
    "fragment": "list-of-requirements",
    "content": "üö© List items should be provided via ng-content.üö© When an item from the list is selected, its value should be set in the input field.üö© When the input field gains focus, the dropdown should automatically open.üö© When an item from the list is selected, the dropdown should close.üö© If the user changes the text in the input field while an item is selected, the model's value should be reset.üö© The combobox should support working with immutable objects."
  },
  {
    "breadcrumbs": [
      "Examples",
      "Combobox"
    ],
    "pageType": "guide",
    "title": "Combobox",
    "section": "Option",
    "route": "/examples/combobox",
    "fragment": "option",
    "content": "Let's start by creating a component that will represent the list item. We will call it Option. Option should be a state control, which mean that it can be selected and deselected. To do this, we will inherit from the DIStateControl class. DIStateControl is a base class for all state controls, it provides all the necessary methods for working with the state of the control. We will highlight the item upon clicking on it, so we need to subscribe to click events and call the check method provided by DIStateControl. We will also use aria-checked='true' property in our styles to highlight the selected item."
  },
  {
    "breadcrumbs": [
      "Examples",
      "Combobox"
    ],
    "pageType": "guide",
    "title": "Combobox",
    "section": "Input field",
    "route": "/examples/combobox",
    "fragment": "input-field",
    "content": "For the input field, we will reuse the diInputString that we created in the Inputs page. We will also create a directive that will be responsible for resetting the value of the combobox if the user changes the input value. We will call it ComboboxInputDirective. This directive will inherit from the DIProxyControl class, because it allows you to modify the behavior of the child control, we also need to implement this directive as a host to turn it into a kind of middleware between the diInputString directive and our future combobox. Since our combobox needs to support working with objects, we will need an additional stringifyFn function that we will be used to convert an object to a string."
  },
  {
    "breadcrumbs": [
      "Examples",
      "Combobox"
    ],
    "pageType": "guide",
    "title": "Combobox",
    "section": "Combobox component",
    "route": "/examples/combobox",
    "fragment": "combobox-component",
    "content": "Now let's create the main component, which will be responsible for the combobox. We will call it ComboboxComponent. To keep it simple for creating the dropdown we use position: absolute. This component will consolidate all child components found in the template or passed through ng-content, meaning they will share one model. The first thing to do is to provide the component as a host so that all child components can register within it. Additionally, we need to implement the DICompareHost interface and provide the component as a compare host. This is necessary for our option component to access the compareFn of our combobox and use it to determine its state (checked or not). Without this function, you may encounter issues with determining the state for immutable objects. To close the dropdown when an item in the list is selected, we can utilize the onChildControlChange hook. It is called every time the model of the current control is changed by a child control."
  },
  {
    "breadcrumbs": [
      "Examples",
      "Combobox"
    ],
    "pageType": "guide",
    "title": "Combobox",
    "section": "Combobox Combobox with objects Combobox with radio buttons",
    "route": "/examples/combobox",
    "fragment": "combobox-1",
    "content": "Since the list items are provided externally, you can replace them with any other state controls. For example, instead of using di-option, you can pass di-radio, and the combobox will continue to work correctly."
  },
  {
    "breadcrumbs": [
      "Examples",
      "Date Range"
    ],
    "pageType": "guide",
    "title": "Date Range",
    "section": "Date Range",
    "route": "/examples/date-range",
    "fragment": "date-range",
    "content": "In this section, we will discuss creating a date range control using this library. To start, let's outline the list of requirements and necessary components."
  },
  {
    "breadcrumbs": [
      "Examples",
      "Date Range"
    ],
    "pageType": "guide",
    "title": "Date Range",
    "section": "The date range should consist of the following components",
    "route": "/examples/date-range",
    "fragment": "the-date-range-should-consist-of-the-following-components",
    "content": "‚öôÔ∏è Input for the start date‚öôÔ∏è Input for the end date"
  },
  {
    "breadcrumbs": [
      "Examples",
      "Date Range"
    ],
    "pageType": "guide",
    "title": "Date Range",
    "section": "List of requirements",
    "route": "/examples/date-range",
    "fragment": "list-of-requirements",
    "content": "üö© Date Range should return an object with the start and end date.üö© Input for the start date should change the start date in the model.üö© Input for the end date should change the end date in the model."
  },
  {
    "breadcrumbs": [
      "Examples",
      "Date Range"
    ],
    "pageType": "guide",
    "title": "Date Range",
    "section": "Inputs",
    "route": "/examples/date-range",
    "fragment": "inputs",
    "content": "To convert the entered date into a Date type, we will use the diInputDate directive that we created in the Inputs article. Its code looks as follows."
  },
  {
    "breadcrumbs": [
      "Examples",
      "Date Range"
    ],
    "pageType": "guide",
    "title": "Date Range",
    "section": "Range directive",
    "route": "/examples/date-range",
    "fragment": "range-directive",
    "content": "To ensure that the model is updated in a specific object field when the input value changes, we need to create an additional host directive. This directive should inherit from the DIProxyControl class. DIProxyControl allows us to modify the model received by child controls and the parent control using two functions, getValue and setValue. We will also add an input key for reusing the directive for both inputs."
  },
  {
    "breadcrumbs": [
      "Examples",
      "Date Range"
    ],
    "pageType": "guide",
    "title": "Date Range",
    "section": "Date Range",
    "route": "/examples/date-range",
    "fragment": "date-range-1",
    "content": "Now, we need to create a Date Range component that will combine our components. Since we can have only one model value, we need to inherit our component from the DIControl class and provide it as a host."
  },
  {
    "breadcrumbs": [
      "Examples",
      "Inputs"
    ],
    "pageType": "guide",
    "title": "Inputs",
    "section": "Inputs",
    "route": "/examples/inputs",
    "fragment": "inputs",
    "content": "You can implement inputs using directives, allowing you to provide your users with access to standard   tag attributes. You can create multiple directives for working with input fields that can convert a string into a number, date, or leave it as is."
  },
  {
    "breadcrumbs": [
      "Examples",
      "Radio"
    ],
    "pageType": "guide",
    "title": "Radio",
    "section": "Radio",
    "route": "/examples/radio",
    "fragment": "radio",
    "content": "In this section, we will discuss creating a radio and radio group using this library. To start, let's outline the list of requirements and necessary components."
  },
  {
    "breadcrumbs": [
      "Examples",
      "Radio"
    ],
    "pageType": "guide",
    "title": "Radio",
    "section": "The radio should consist of the following components",
    "route": "/examples/radio",
    "fragment": "the-radio-should-consist-of-the-following-components",
    "content": "‚öôÔ∏è Radio group‚öôÔ∏è Radio"
  },
  {
    "breadcrumbs": [
      "Examples",
      "Radio"
    ],
    "pageType": "guide",
    "title": "Radio",
    "section": "List of requirements",
    "route": "/examples/radio",
    "fragment": "list-of-requirements",
    "content": "üö© Radio should be provided via ng-content.üö© Only one radio can be selected at a time.üö© If radio group's model is changed, the radio should be selected or deselected.üö© The radio should support working with immutable objects."
  },
  {
    "breadcrumbs": [
      "Examples",
      "Radio"
    ],
    "pageType": "guide",
    "title": "Radio",
    "section": "Radio",
    "route": "/examples/radio",
    "fragment": "radio-1",
    "content": "The radio is a state control, and the user should have the ability to check only one radio at a time. To implement the state control, we need to inherit it from DIStateControl, which will provide us with all the necessary functionality. Internally, we will also use a native input type=\"radio\" to maintain the native behavior. For example, when a radio is used inside a label tag, it should change its state when the label is clicked. We also need to inject DICompareHost to access the compareFn from the radio group in the future. This function will help us compare immutable objects."
  },
  {
    "breadcrumbs": [
      "Examples",
      "Radio"
    ],
    "pageType": "guide",
    "title": "Radio",
    "section": "Radio Group",
    "route": "/examples/radio",
    "fragment": "radio-group",
    "content": "The radio group should contain only one value and update the state of child controls. To implement the group, we need to inherit our component class from the DIControl class. DIControl takes the model as is, which means that the new model value will replace the previous one. This way, only one radio button will always be selected. We also need to implement the DICompareHost interface and provide the group as a compare host so that child radio buttons have access to the compareFn and can correctly determine their state when working with immutable objects."
  },
  {
    "breadcrumbs": [
      "Getting Started",
      "How to use it?"
    ],
    "pageType": "guide",
    "title": "How to use it?",
    "section": "How to use it?",
    "route": "/getting-started/how-to-use-it",
    "fragment": "how-to-use-it",
    "content": "DIControls includes several classes that can be used to create controls."
  },
  {
    "breadcrumbs": [
      "Getting Started",
      "How to use it?"
    ],
    "pageType": "guide",
    "title": "How to use it?",
    "section": "Controls connection",
    "route": "/getting-started/how-to-use-it",
    "fragment": "controls-connection",
    "content": "Each control can be connected to its child or parent through Dependency Injection. When controls are connected, they exchange model updates to \"synchronize\" it. In other words, when one control updates its model independently or through the NgControl API, all other linked controls will also update their models based on this update. To connect controls, your parent component should be provided using provideHostControl function. To connect a child control, you need to inject parent control using injectHostControl function."
  },
  {
    "breadcrumbs": [
      "Getting Started",
      "How to use it?"
    ],
    "pageType": "guide",
    "title": "How to use it?",
    "section": "Controls connection",
    "route": "/getting-started/how-to-use-it",
    "fragment": "controls-connection",
    "content": "You can also pass additional properties that are available to the inject() function."
  },
  {
    "breadcrumbs": [
      "Getting Started",
      "How to use it?"
    ],
    "pageType": "guide",
    "title": "How to use it?",
    "section": "Controls connection",
    "route": "/getting-started/how-to-use-it",
    "fragment": "controls-connection",
    "content": "Now if you put ChildControlComponent inside ParentControlComponent tag or its template, they will be connected."
  },
  {
    "breadcrumbs": [
      "Getting Started",
      "How to use it?"
    ],
    "pageType": "guide",
    "title": "How to use it?",
    "section": "Classes overview",
    "route": "/getting-started/how-to-use-it",
    "fragment": "classes-overview",
    "content": "Below, we will examine these classes and their usage options."
  },
  {
    "breadcrumbs": [
      "Getting Started",
      "How to use it?"
    ],
    "pageType": "guide",
    "title": "How to use it?",
    "section": "DIControl",
    "route": "/getting-started/how-to-use-it",
    "fragment": "dicontrol",
    "content": "DIControl is the base class that takes the model \"as is\" and updates it without additional modifications. This class is suitable for implementing most UI controls. By using it, you can implement both parent components that accumulate and facilitate communication between child controls and simple standalone controls. API: DIControlExamples: Inputs"
  },
  {
    "breadcrumbs": [
      "Getting Started",
      "How to use it?"
    ],
    "pageType": "guide",
    "title": "How to use it?",
    "section": "DIStateControl",
    "route": "/getting-started/how-to-use-it",
    "fragment": "distatecontrol",
    "content": "DIStateControl inherits all the functionality from DIControl, adding additional methods for creating a state control such as checkbox, radio, ship etc. API: DIStateControlExamples: Checkbox, Radio, Switch, Combobox"
  },
  {
    "breadcrumbs": [
      "Getting Started",
      "How to use it?"
    ],
    "pageType": "guide",
    "title": "How to use it?",
    "section": "DICollectionControl",
    "route": "/getting-started/how-to-use-it",
    "fragment": "dicollectioncontrol",
    "content": "DICollectionControl stores its model as an array and has additional integration with DIStateControl. If the child DIStateControl has a state of checked = true, its value will be added to the DICollectionControl's model as an array element. Otherwise, it will be removed. This control can assist you in creating components like CheckboxGroup or a multi-select ComboBox. API: DICollectionControlExamples: Checkbox"
  },
  {
    "breadcrumbs": [
      "Getting Started",
      "How to use it?"
    ],
    "pageType": "guide",
    "title": "How to use it?",
    "section": "DIProxyControl",
    "route": "/getting-started/how-to-use-it",
    "fragment": "diproxycontrol",
    "content": "DIProxyControl is very situational, it can be used to bind the model of a child control to a specific field of its parent's object or to modify the model before providing it to the child control and vice versa. API: DIProxyControlExamples: Date Range, Combobox"
  },
  {
    "breadcrumbs": [
      "Getting Started",
      "Installation"
    ],
    "pageType": "guide",
    "title": "Installation",
    "section": "What is DIControls library?",
    "route": "/getting-started/installation",
    "fragment": "what-is-dicontrols-library",
    "content": "DIControls is a library for creating reusable, flexible UI controls using a declarative approach. Each component you create depends only on its own model, allowing for its reuse in many other places. It also enables users of your controls to modify them, replace existing components in your library, or extend your components by adding their own. Additionally, this library minimizes the implementation of ControlValueAccessor, so all you need to do is inherit from a specific class and trigger updates using the this.updateModel(newModel) method, update the touched state using this.touched(), or process updates in the onIncomingUpdate hook if necessary."
  },
  {
    "breadcrumbs": [
      "Getting Started",
      "Installation"
    ],
    "pageType": "guide",
    "title": "Installation",
    "section": "Installation",
    "route": "/getting-started/installation",
    "fragment": "installation-1",
    "content": "This library works only with Angular 16+."
  },
  {
    "breadcrumbs": [
      "Getting Started",
      "Installation"
    ],
    "pageType": "guide",
    "title": "Installation",
    "section": "Installation",
    "route": "/getting-started/installation",
    "fragment": "installation-1",
    "content": "You don't need to import or add any module to your application in order to create the controls. You just need to install the package via the following command:"
  },
  {
    "breadcrumbs": [
      "Getting Started",
      "Installation"
    ],
    "pageType": "guide",
    "title": "Installation",
    "section": "Next Steps",
    "route": "/getting-started/installation",
    "fragment": "next-steps",
    "content": "To learn more about the concept and how to use the library, please visit the How to use it? page;"
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "provideCompareHost"
    ],
    "pageType": "api",
    "title": "provideCompareHost",
    "section": "provideCompareHost",
    "route": "/api/di-controls/functions/provideCompareHost",
    "fragment": "providecomparehost",
    "content": "Provides DICompareHost as a component that should be used to compare two values"
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "provideCompareHost"
    ],
    "pageType": "api",
    "title": "provideCompareHost",
    "section": "Parameters",
    "route": "/api/di-controls/functions/provideCompareHost",
    "fragment": "parameters",
    "content": "Existing class that implements DICompareHost"
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DICompareHost"
    ],
    "pageType": "api",
    "title": "DICompareHost",
    "section": "DICompareHost",
    "route": "/api/di-controls/classes/DICompareHost",
    "fragment": "dicomparehost",
    "content": "Uses to implement host with compare function"
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DICompareHost"
    ],
    "pageType": "api",
    "title": "DICompareHost",
    "section": "Properties",
    "route": "/api/di-controls/classes/DICompareHost",
    "fragment": "properties",
    "content": "Uses to compare two values (useful to compare two objects, for example by id)"
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "SetCompare"
    ],
    "pageType": "api",
    "title": "SetCompare",
    "section": "SetCompare",
    "route": "/api/di-controls/classes/SetCompare",
    "fragment": "setcompare"
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DICollectionControlConfig"
    ],
    "pageType": "api",
    "title": "DICollectionControlConfig",
    "section": "DICollectionControlConfig",
    "route": "/api/di-controls/interfaces/DICollectionControlConfig",
    "fragment": "dicollectioncontrolconfig",
    "content": "Configuration for the DICollectionControl."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DICollectionControlConfig"
    ],
    "pageType": "api",
    "title": "DICollectionControlConfig",
    "section": "Properties",
    "route": "/api/di-controls/interfaces/DICollectionControlConfig",
    "fragment": "properties",
    "content": "Function that will be used to compare values in the array. Useful when you want to compare objects by some property."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DICollectionControlConfig"
    ],
    "pageType": "api",
    "title": "DICollectionControlConfig",
    "section": "Properties",
    "route": "/api/di-controls/interfaces/DICollectionControlConfig",
    "fragment": "properties",
    "content": "Host control for the current control. It can be injected using DI_HOST_CONTROL token."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DICollectionControlConfig"
    ],
    "pageType": "api",
    "title": "DICollectionControlConfig",
    "section": "Properties",
    "route": "/api/di-controls/interfaces/DICollectionControlConfig",
    "fragment": "properties",
    "content": "Function that will be called when the current control receives an update from the child control."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DICollectionControlConfig"
    ],
    "pageType": "api",
    "title": "DICollectionControlConfig",
    "section": "Properties",
    "route": "/api/di-controls/interfaces/DICollectionControlConfig",
    "fragment": "properties",
    "content": "Function that will be called when the current control receives an update from the host control or from the Forms API."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DICollectionControl"
    ],
    "pageType": "api",
    "title": "DICollectionControl",
    "section": "DICollectionControl",
    "route": "/api/di-controls/classes/DICollectionControl",
    "fragment": "dicollectioncontrol",
    "content": "DICollectionControl can be used to implement array controls (checkbox group, radio group, chips, etc.). It has an additional integration with DIStateControl that allows you to use it as a host for DIStateControl controls. If you use DIStateControl as a child control, then DICollectionControl will update its model when the child control is checked or unchecked, so DICollectionControl will contain only checked values. It also works with other controls, but their model should be an array."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DICollectionControl"
    ],
    "pageType": "api",
    "title": "DICollectionControl",
    "section": "DICollectionControl",
    "route": "/api/di-controls/classes/DICollectionControl",
    "fragment": "dicollectioncontrol",
    "content": "If child control model is updated with non-array value, then DICollectionControl will be updated with null."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DICollectionControl"
    ],
    "pageType": "api",
    "title": "DICollectionControl",
    "section": "Creating a control",
    "route": "/api/di-controls/classes/DICollectionControl",
    "fragment": "creating-a-control",
    "content": "To create a control you need to extend your @Component or @Directive from DICollectionControl class. After that your control will be able to work with NgModel, FormControl."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DICollectionControl"
    ],
    "pageType": "api",
    "title": "DICollectionControl",
    "section": "Registering as a host",
    "route": "/api/di-controls/classes/DICollectionControl",
    "fragment": "registering-as-a-host",
    "content": "By default your control can work only with NgModel and FormControl. But you can register your control as a host for another controls, then your control will be able to update them and accept updates from them. To do that you need to use provideHostControl function."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DICollectionControl"
    ],
    "pageType": "api",
    "title": "DICollectionControl",
    "section": "Injecting host control",
    "route": "/api/di-controls/classes/DICollectionControl",
    "fragment": "injecting-host-control",
    "content": "By default your control doesn't communicate with host controls. But you can inject host control and put it into super call. This will register your control in the host control and start communication between them."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DICollectionControl"
    ],
    "pageType": "api",
    "title": "DICollectionControl",
    "section": "Injecting host control",
    "route": "/api/di-controls/classes/DICollectionControl",
    "fragment": "injecting-host-control",
    "content": "If you register your control as a host for another controls, then you can inject it only with skipSelf option."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DICollectionControl"
    ],
    "pageType": "api",
    "title": "DICollectionControl",
    "section": "Getting model",
    "route": "/api/di-controls/classes/DICollectionControl",
    "fragment": "getting-model",
    "content": "To get model you need to use model property. It will return model for the current control."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DICollectionControl"
    ],
    "pageType": "api",
    "title": "DICollectionControl",
    "section": "Updating model",
    "route": "/api/di-controls/classes/DICollectionControl",
    "fragment": "updating-model",
    "content": "To update model you need to call updateModel method. It will update model for the current control and all children controls, as well as for the NgModel or FormControl."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DICollectionControl"
    ],
    "pageType": "api",
    "title": "DICollectionControl",
    "section": "Catching updates",
    "route": "/api/di-controls/classes/DICollectionControl",
    "fragment": "catching-updates",
    "content": "Sometimes you may need to catch updates from different sources. For example, to update the value of the native input element. To do this, you can provide the onIncomingUpdate hook."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DICollectionControl"
    ],
    "pageType": "api",
    "title": "DICollectionControl",
    "section": "Comparing values",
    "route": "/api/di-controls/classes/DICollectionControl",
    "fragment": "comparing-values",
    "content": "By default DICollectionControl uses === operator to compare values. It may be not enough for some cases, for example, when you want to compare immutable objects. To solve this problem you can provide compareFn function and provide your control as a DICompareHost. It will be used to compare values in the array."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DICollectionControl"
    ],
    "pageType": "api",
    "title": "DICollectionControl",
    "section": "Comparing values",
    "route": "/api/di-controls/classes/DICollectionControl",
    "fragment": "comparing-values",
    "content": "This function will be used by DIStateControl to compare values, to set checked state. Don't forget to inject DICompareHost in your DIStateControl to make it work."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DICollectionControl"
    ],
    "pageType": "api",
    "title": "DICollectionControl",
    "section": "Properties",
    "route": "/api/di-controls/classes/DICollectionControl",
    "fragment": "properties",
    "content": "List of children controls."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DICollectionControl"
    ],
    "pageType": "api",
    "title": "DICollectionControl",
    "section": "Properties",
    "route": "/api/di-controls/classes/DICollectionControl",
    "fragment": "properties",
    "content": "Function that will be used to compare values in the array. Useful when you want to compare objects by some property (e.g. id)."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DICollectionControl"
    ],
    "pageType": "api",
    "title": "DICollectionControl",
    "section": "Properties",
    "route": "/api/di-controls/classes/DICollectionControl",
    "fragment": "properties",
    "content": "Request host for update the current control. Host will update the current control based on its current state and host control logic."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DICollectionControl"
    ],
    "pageType": "api",
    "title": "DICollectionControl",
    "section": "Properties",
    "route": "/api/di-controls/classes/DICollectionControl",
    "fragment": "properties",
    "content": "Function that should be used to make control touched."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DICollectionControl"
    ],
    "pageType": "api",
    "title": "DICollectionControl",
    "section": "Properties",
    "route": "/api/di-controls/classes/DICollectionControl",
    "fragment": "properties",
    "content": "Control from which we have to update our model."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DICollectionControl"
    ],
    "pageType": "api",
    "title": "DICollectionControl",
    "section": "Accessors",
    "route": "/api/di-controls/classes/DICollectionControl",
    "fragment": "accessors",
    "content": "Returns true if the control is disabled."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DICollectionControl"
    ],
    "pageType": "api",
    "title": "DICollectionControl",
    "section": "Accessors",
    "route": "/api/di-controls/classes/DICollectionControl",
    "fragment": "accessors",
    "content": "Returns true if the control is not empty."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DICollectionControl"
    ],
    "pageType": "api",
    "title": "DICollectionControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DICollectionControl",
    "fragment": "methods",
    "content": "Function catches updates from child controls and updates the current control model."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DICollectionControl"
    ],
    "pageType": "api",
    "title": "DICollectionControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DICollectionControl",
    "fragment": "methods",
    "content": "control that was updated."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DICollectionControl"
    ],
    "pageType": "api",
    "title": "DICollectionControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DICollectionControl",
    "fragment": "methods",
    "content": "new value."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DICollectionControl"
    ],
    "pageType": "api",
    "title": "DICollectionControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DICollectionControl",
    "fragment": "methods",
    "content": "Registers provided control as a child of the current control."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DICollectionControl"
    ],
    "pageType": "api",
    "title": "DICollectionControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DICollectionControl",
    "fragment": "methods",
    "content": "control that will be registered."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DICollectionControl"
    ],
    "pageType": "api",
    "title": "DICollectionControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DICollectionControl",
    "fragment": "methods",
    "content": "Method is called by the forms API."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DICollectionControl"
    ],
    "pageType": "api",
    "title": "DICollectionControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DICollectionControl",
    "fragment": "methods",
    "content": "callback function to register on value change"
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DICollectionControl"
    ],
    "pageType": "api",
    "title": "DICollectionControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DICollectionControl",
    "fragment": "methods",
    "content": "Registers provided function as a callback that will be called when the current control changes. This function will be provided by the host control to update its model."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DICollectionControl"
    ],
    "pageType": "api",
    "title": "DICollectionControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DICollectionControl",
    "fragment": "methods",
    "content": "callback function."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DICollectionControl"
    ],
    "pageType": "api",
    "title": "DICollectionControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DICollectionControl",
    "fragment": "methods",
    "content": "Method is called by the forms API."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DICollectionControl"
    ],
    "pageType": "api",
    "title": "DICollectionControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DICollectionControl",
    "fragment": "methods",
    "content": "callback function to register on touch"
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DICollectionControl"
    ],
    "pageType": "api",
    "title": "DICollectionControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DICollectionControl",
    "fragment": "methods",
    "content": "Registers provided function as a callback that can be called to request an update from the host control. After calling this function the host control will update the model of the current control based on the current state of the control and host control logic."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DICollectionControl"
    ],
    "pageType": "api",
    "title": "DICollectionControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DICollectionControl",
    "fragment": "methods",
    "content": "callback function."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DICollectionControl"
    ],
    "pageType": "api",
    "title": "DICollectionControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DICollectionControl",
    "fragment": "methods",
    "content": "Method is called by the forms API to write to the view when programmatic changes from model to view are requested."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DICollectionControl"
    ],
    "pageType": "api",
    "title": "DICollectionControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DICollectionControl",
    "fragment": "methods",
    "content": "new value"
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DICollectionControl"
    ],
    "pageType": "api",
    "title": "DICollectionControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DICollectionControl",
    "fragment": "methods",
    "content": "Unregisters provided control from the current control."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DICollectionControl"
    ],
    "pageType": "api",
    "title": "DICollectionControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DICollectionControl",
    "fragment": "methods",
    "content": "control that will be unregistered."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DICollectionControl"
    ],
    "pageType": "api",
    "title": "DICollectionControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DICollectionControl",
    "fragment": "methods",
    "content": "Updates provided control with the provided value."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DICollectionControl"
    ],
    "pageType": "api",
    "title": "DICollectionControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DICollectionControl",
    "fragment": "methods",
    "content": "control that will be updated."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DICollectionControl"
    ],
    "pageType": "api",
    "title": "DICollectionControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DICollectionControl",
    "fragment": "methods",
    "content": "Updates all child controls with the provided value."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DICollectionControl"
    ],
    "pageType": "api",
    "title": "DICollectionControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DICollectionControl",
    "fragment": "methods",
    "content": "new value."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DICollectionControl"
    ],
    "pageType": "api",
    "title": "DICollectionControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DICollectionControl",
    "fragment": "methods",
    "content": "Updates the model of the current control. This is the main method that should be used to update the model."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DICollectionControl"
    ],
    "pageType": "api",
    "title": "DICollectionControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DICollectionControl",
    "fragment": "methods",
    "content": "Method is called by the forms API to write to the view when programmatic changes from model to view are requested."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DICollectionControl"
    ],
    "pageType": "api",
    "title": "DICollectionControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DICollectionControl",
    "fragment": "methods",
    "content": "Method is called by the host to update the value of the control."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControlValueAccessor"
    ],
    "pageType": "api",
    "title": "DIControlValueAccessor",
    "section": "DIControlValueAccessor",
    "route": "/api/di-controls/classes/DIControlValueAccessor",
    "fragment": "dicontrolvalueaccessor",
    "content": "Base implementation of ControlValueAccessor"
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControlValueAccessor"
    ],
    "pageType": "api",
    "title": "DIControlValueAccessor",
    "section": "Accessors",
    "route": "/api/di-controls/classes/DIControlValueAccessor",
    "fragment": "accessors",
    "content": "Returns true if the control is disabled."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControlValueAccessor"
    ],
    "pageType": "api",
    "title": "DIControlValueAccessor",
    "section": "Accessors",
    "route": "/api/di-controls/classes/DIControlValueAccessor",
    "fragment": "accessors",
    "content": "Returns true if the control is not empty."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControlValueAccessor"
    ],
    "pageType": "api",
    "title": "DIControlValueAccessor",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIControlValueAccessor",
    "fragment": "methods",
    "content": "Method is called by the forms API."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControlValueAccessor"
    ],
    "pageType": "api",
    "title": "DIControlValueAccessor",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIControlValueAccessor",
    "fragment": "methods",
    "content": "callback function to register on value change"
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControlValueAccessor"
    ],
    "pageType": "api",
    "title": "DIControlValueAccessor",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIControlValueAccessor",
    "fragment": "methods",
    "content": "Method is called by the forms API."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControlValueAccessor"
    ],
    "pageType": "api",
    "title": "DIControlValueAccessor",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIControlValueAccessor",
    "fragment": "methods",
    "content": "callback function to register on touch"
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControlValueAccessor"
    ],
    "pageType": "api",
    "title": "DIControlValueAccessor",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIControlValueAccessor",
    "fragment": "methods",
    "content": "Method is called by the forms API to write to the view when programmatic changes from model to view are requested."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControlValueAccessor"
    ],
    "pageType": "api",
    "title": "DIControlValueAccessor",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIControlValueAccessor",
    "fragment": "methods",
    "content": "new value"
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControlValueAccessor"
    ],
    "pageType": "api",
    "title": "DIControlValueAccessor",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIControlValueAccessor",
    "fragment": "methods",
    "content": "Updates the model. Use this method to update model from your Control"
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControlValueAccessor"
    ],
    "pageType": "api",
    "title": "DIControlValueAccessor",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIControlValueAccessor",
    "fragment": "methods",
    "content": "new value"
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControlValueAccessor"
    ],
    "pageType": "api",
    "title": "DIControlValueAccessor",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIControlValueAccessor",
    "fragment": "methods",
    "content": "Method is called by the forms API to write to the view when programmatic changes from model to view are requested."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControlValueAccessor"
    ],
    "pageType": "api",
    "title": "DIControlValueAccessor",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIControlValueAccessor",
    "fragment": "methods",
    "content": "new value"
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControlConfig"
    ],
    "pageType": "api",
    "title": "DIControlConfig",
    "section": "DIControlConfig",
    "route": "/api/di-controls/interfaces/DIControlConfig",
    "fragment": "dicontrolconfig",
    "content": "Configuration for the DIControl."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControlConfig"
    ],
    "pageType": "api",
    "title": "DIControlConfig",
    "section": "Properties",
    "route": "/api/di-controls/interfaces/DIControlConfig",
    "fragment": "properties",
    "content": "Host control for the current control. It can be injected using DI_HOST_CONTROL token."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControlConfig"
    ],
    "pageType": "api",
    "title": "DIControlConfig",
    "section": "Properties",
    "route": "/api/di-controls/interfaces/DIControlConfig",
    "fragment": "properties",
    "content": "Function that will be called when the current control receives an update from the child control."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControlConfig"
    ],
    "pageType": "api",
    "title": "DIControlConfig",
    "section": "Properties",
    "route": "/api/di-controls/interfaces/DIControlConfig",
    "fragment": "properties",
    "content": "Function that will be called when the current control receives an update from the host control or from the Forms API."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControl"
    ],
    "pageType": "api",
    "title": "DIControl",
    "section": "DIControl",
    "route": "/api/di-controls/classes/DIControl",
    "fragment": "dicontrol",
    "content": "DIControl can be used to implement any control that you want. It can work with any model type. All updates from children will be accepted as is. And updates from outside (FormControl, NgModel, another Control) will be accepted as is too."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControl"
    ],
    "pageType": "api",
    "title": "DIControl",
    "section": "Creating a control",
    "route": "/api/di-controls/classes/DIControl",
    "fragment": "creating-a-control",
    "content": "To create a control you need to extend your @Component or @Directive from DIControl class. After that your control will be able to work with NgModel, FormControl."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControl"
    ],
    "pageType": "api",
    "title": "DIControl",
    "section": "Registering as a host",
    "route": "/api/di-controls/classes/DIControl",
    "fragment": "registering-as-a-host",
    "content": "By default your control can work only with NgModel and FormControl. But you can register your control as a host for another controls, then your control will be able to update them and accept updates from them. To do that you need to use provideHostControl function."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControl"
    ],
    "pageType": "api",
    "title": "DIControl",
    "section": "Injecting host control",
    "route": "/api/di-controls/classes/DIControl",
    "fragment": "injecting-host-control",
    "content": "By default your control doesn't communicate with host controls. But you can inject host control and put it into super call. This will register your control in the host control and start communication between them."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControl"
    ],
    "pageType": "api",
    "title": "DIControl",
    "section": "Injecting host control",
    "route": "/api/di-controls/classes/DIControl",
    "fragment": "injecting-host-control",
    "content": "If you register your control as a host for another controls, then you can inject it only with skipSelf option."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControl"
    ],
    "pageType": "api",
    "title": "DIControl",
    "section": "Getting model",
    "route": "/api/di-controls/classes/DIControl",
    "fragment": "getting-model",
    "content": "To get model you need to use model property. It will return model for the current control."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControl"
    ],
    "pageType": "api",
    "title": "DIControl",
    "section": "Updating model",
    "route": "/api/di-controls/classes/DIControl",
    "fragment": "updating-model",
    "content": "To update model you need to call updateModel method. It will update model for the current control and all children controls, as well as for the NgModel or FormControl."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControl"
    ],
    "pageType": "api",
    "title": "DIControl",
    "section": "Catching updates",
    "route": "/api/di-controls/classes/DIControl",
    "fragment": "catching-updates",
    "content": "Sometimes you may need to catch updates from different sources. For example, to update the value of the native input element. To do this, you can provide the onIncomingUpdate hook."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControl"
    ],
    "pageType": "api",
    "title": "DIControl",
    "section": "Properties",
    "route": "/api/di-controls/classes/DIControl",
    "fragment": "properties",
    "content": "List of children controls."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControl"
    ],
    "pageType": "api",
    "title": "DIControl",
    "section": "Properties",
    "route": "/api/di-controls/classes/DIControl",
    "fragment": "properties",
    "content": "Request host for update the current control. Host will update the current control based on its current state and host control logic."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControl"
    ],
    "pageType": "api",
    "title": "DIControl",
    "section": "Properties",
    "route": "/api/di-controls/classes/DIControl",
    "fragment": "properties",
    "content": "Function that should be used to make control touched."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControl"
    ],
    "pageType": "api",
    "title": "DIControl",
    "section": "Properties",
    "route": "/api/di-controls/classes/DIControl",
    "fragment": "properties",
    "content": "Control from which we have to update our model."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControl"
    ],
    "pageType": "api",
    "title": "DIControl",
    "section": "Accessors",
    "route": "/api/di-controls/classes/DIControl",
    "fragment": "accessors",
    "content": "Returns true if the control is disabled."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControl"
    ],
    "pageType": "api",
    "title": "DIControl",
    "section": "Accessors",
    "route": "/api/di-controls/classes/DIControl",
    "fragment": "accessors",
    "content": "Returns true if the control is not empty."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControl"
    ],
    "pageType": "api",
    "title": "DIControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIControl",
    "fragment": "methods",
    "content": "Function catches updates from child controls and updates the current control model."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControl"
    ],
    "pageType": "api",
    "title": "DIControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIControl",
    "fragment": "methods",
    "content": "control that was updated."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControl"
    ],
    "pageType": "api",
    "title": "DIControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIControl",
    "fragment": "methods",
    "content": "new value."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControl"
    ],
    "pageType": "api",
    "title": "DIControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIControl",
    "fragment": "methods",
    "content": "Registers provided control as a child of the current control."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControl"
    ],
    "pageType": "api",
    "title": "DIControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIControl",
    "fragment": "methods",
    "content": "control that will be registered."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControl"
    ],
    "pageType": "api",
    "title": "DIControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIControl",
    "fragment": "methods",
    "content": "Method is called by the forms API."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControl"
    ],
    "pageType": "api",
    "title": "DIControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIControl",
    "fragment": "methods",
    "content": "callback function to register on value change"
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControl"
    ],
    "pageType": "api",
    "title": "DIControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIControl",
    "fragment": "methods",
    "content": "Registers provided function as a callback that will be called when the current control changes. This function will be provided by the host control to update its model."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControl"
    ],
    "pageType": "api",
    "title": "DIControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIControl",
    "fragment": "methods",
    "content": "callback function."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControl"
    ],
    "pageType": "api",
    "title": "DIControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIControl",
    "fragment": "methods",
    "content": "Method is called by the forms API."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControl"
    ],
    "pageType": "api",
    "title": "DIControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIControl",
    "fragment": "methods",
    "content": "callback function to register on touch"
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControl"
    ],
    "pageType": "api",
    "title": "DIControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIControl",
    "fragment": "methods",
    "content": "Registers provided function as a callback that can be called to request an update from the host control. After calling this function the host control will update the model of the current control based on the current state of the control and host control logic."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControl"
    ],
    "pageType": "api",
    "title": "DIControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIControl",
    "fragment": "methods",
    "content": "callback function."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControl"
    ],
    "pageType": "api",
    "title": "DIControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIControl",
    "fragment": "methods",
    "content": "Method is called by the forms API to write to the view when programmatic changes from model to view are requested."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControl"
    ],
    "pageType": "api",
    "title": "DIControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIControl",
    "fragment": "methods",
    "content": "new value"
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControl"
    ],
    "pageType": "api",
    "title": "DIControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIControl",
    "fragment": "methods",
    "content": "Unregisters provided control from the current control."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControl"
    ],
    "pageType": "api",
    "title": "DIControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIControl",
    "fragment": "methods",
    "content": "control that will be unregistered."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControl"
    ],
    "pageType": "api",
    "title": "DIControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIControl",
    "fragment": "methods",
    "content": "Updates provided control with the provided value."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControl"
    ],
    "pageType": "api",
    "title": "DIControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIControl",
    "fragment": "methods",
    "content": "control that will be updated."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControl"
    ],
    "pageType": "api",
    "title": "DIControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIControl",
    "fragment": "methods",
    "content": "new value."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControl"
    ],
    "pageType": "api",
    "title": "DIControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIControl",
    "fragment": "methods",
    "content": "Updates all child controls with the provided value."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControl"
    ],
    "pageType": "api",
    "title": "DIControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIControl",
    "fragment": "methods",
    "content": "new value."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControl"
    ],
    "pageType": "api",
    "title": "DIControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIControl",
    "fragment": "methods",
    "content": "Updates the model of the current control. This is the main method that should be used to update the model."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControl"
    ],
    "pageType": "api",
    "title": "DIControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIControl",
    "fragment": "methods",
    "content": "new value."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControl"
    ],
    "pageType": "api",
    "title": "DIControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIControl",
    "fragment": "methods",
    "content": "Method is called by the forms API to write to the view when programmatic changes from model to view are requested."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControl"
    ],
    "pageType": "api",
    "title": "DIControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIControl",
    "fragment": "methods",
    "content": "Method is called by the host to update the value of the control."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControl"
    ],
    "pageType": "api",
    "title": "DIControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIControl",
    "fragment": "methods",
    "content": "new value"
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIStateControlConfig"
    ],
    "pageType": "api",
    "title": "DIStateControlConfig",
    "section": "DIStateControlConfig",
    "route": "/api/di-controls/interfaces/DIStateControlConfig",
    "fragment": "distatecontrolconfig",
    "content": "Configuration for the DIStateControl."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIStateControlConfig"
    ],
    "pageType": "api",
    "title": "DIStateControlConfig",
    "section": "Properties",
    "route": "/api/di-controls/interfaces/DIStateControlConfig",
    "fragment": "properties",
    "content": "Function that will be used to compare model value with the value property."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIStateControlConfig"
    ],
    "pageType": "api",
    "title": "DIStateControlConfig",
    "section": "Properties",
    "route": "/api/di-controls/interfaces/DIStateControlConfig",
    "fragment": "properties",
    "content": "Indicates whether the current control can have intermediate state."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIStateControlConfig"
    ],
    "pageType": "api",
    "title": "DIStateControlConfig",
    "section": "Properties",
    "route": "/api/di-controls/interfaces/DIStateControlConfig",
    "fragment": "properties",
    "content": "Host control for the current control. It can be injected using DI_HOST_CONTROL token."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIStateControlConfig"
    ],
    "pageType": "api",
    "title": "DIStateControlConfig",
    "section": "Properties",
    "route": "/api/di-controls/interfaces/DIStateControlConfig",
    "fragment": "properties",
    "content": "Function that will be called when the current control receives an update from the child control."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIStateControlConfig"
    ],
    "pageType": "api",
    "title": "DIStateControlConfig",
    "section": "Properties",
    "route": "/api/di-controls/interfaces/DIStateControlConfig",
    "fragment": "properties",
    "content": "Function that will be called when the current control receives an update from the host control or from the Forms API."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIStateControlConfig"
    ],
    "pageType": "api",
    "title": "DIStateControlConfig",
    "section": "Properties",
    "route": "/api/di-controls/interfaces/DIStateControlConfig",
    "fragment": "properties",
    "content": "Value that will be used for the unchecked state."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIStateControl"
    ],
    "pageType": "api",
    "title": "DIStateControl",
    "section": "DIStateControl",
    "route": "/api/di-controls/classes/DIStateControl",
    "fragment": "distatecontrol",
    "content": "DIStateControl can be used to implement state controls (checkbox, radio, chip, switch, etc.). It extends DIControl and adds checked signal that can be used to get checked state. By default it works with boolean type, it adds value input that can be used to set custom \"true\" value."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIStateControl"
    ],
    "pageType": "api",
    "title": "DIStateControl",
    "section": "Creating a control",
    "route": "/api/di-controls/classes/DIStateControl",
    "fragment": "creating-a-control",
    "content": "To create a control you need to extend your @Component or @Directive from DIStateControl class. After that your control will be able to work with NgModel, FormControl."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIStateControl"
    ],
    "pageType": "api",
    "title": "DIStateControl",
    "section": "Injecting host control",
    "route": "/api/di-controls/classes/DIStateControl",
    "fragment": "injecting-host-control",
    "content": "By default your control doesn't communicate with host controls. But you can inject host control and put it into super call. This will register your control in the host control and start communication between them."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIStateControl"
    ],
    "pageType": "api",
    "title": "DIStateControl",
    "section": "Injecting host control",
    "route": "/api/di-controls/classes/DIStateControl",
    "fragment": "injecting-host-control",
    "content": "If you register your control as a host for another controls, then you can inject it only with skipSelf option."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIStateControl"
    ],
    "pageType": "api",
    "title": "DIStateControl",
    "section": "Getting checked state",
    "route": "/api/di-controls/classes/DIStateControl",
    "fragment": "getting-checked-state",
    "content": "To get checked state you need to use checked signal. It will return true if the current control is checked, false if it is unchecked and null if it is in intermediate state."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIStateControl"
    ],
    "pageType": "api",
    "title": "DIStateControl",
    "section": "Getting model",
    "route": "/api/di-controls/classes/DIStateControl",
    "fragment": "getting-model",
    "content": "To get model you need to use model property. It will return model for the current control."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIStateControl"
    ],
    "pageType": "api",
    "title": "DIStateControl",
    "section": "Updating model",
    "route": "/api/di-controls/classes/DIStateControl",
    "fragment": "updating-model",
    "content": "To update model you should use check, uncheck, intermediate or toggle methods. They will update model based on the current state and configuration."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIStateControl"
    ],
    "pageType": "api",
    "title": "DIStateControl",
    "section": "Catching updates",
    "route": "/api/di-controls/classes/DIStateControl",
    "fragment": "catching-updates",
    "content": "Sometimes you may need to catch updates from different sources. For example, to update the value of the native input element. To do this, you can provide the onIncomingUpdate hook."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIStateControl"
    ],
    "pageType": "api",
    "title": "DIStateControl",
    "section": "Changing styles based on the state",
    "route": "/api/di-controls/classes/DIStateControl",
    "fragment": "changing-styles-based-on-the-state",
    "content": "DIStateControl binds aria-checked attribute to the host element. You can use it to change styles of your child elements."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIStateControl"
    ],
    "pageType": "api",
    "title": "DIStateControl",
    "section": "Using with DICollectionControl",
    "route": "/api/di-controls/classes/DIStateControl",
    "fragment": "using-with-dicollectioncontrol",
    "content": "Using DIStateControl together with DICollectionControl will result in DICollectionControl containing a list of values from DIStateControl that have a checked state. If your DIStateControl has objects as values, you may likely need a comparison function because they can sometimes be immutable. To achieve this, provide your DICollectionControl as a DICompareHost and inject it into your DIStateControl to give DIStateControl access to the compareFn function."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIStateControl"
    ],
    "pageType": "api",
    "title": "DIStateControl",
    "section": "Using with DICollectionControl",
    "route": "/api/di-controls/classes/DIStateControl",
    "fragment": "using-with-dicollectioncontrol",
    "content": "DICollectionControl requires an explicit specification of the uncheckedValue in the DIStateControl"
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIStateControl"
    ],
    "pageType": "api",
    "title": "DIStateControl",
    "section": "Properties",
    "route": "/api/di-controls/classes/DIStateControl",
    "fragment": "properties",
    "content": "List of children controls."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIStateControl"
    ],
    "pageType": "api",
    "title": "DIStateControl",
    "section": "Properties",
    "route": "/api/di-controls/classes/DIStateControl",
    "fragment": "properties",
    "content": "Request host for update the current control. Host will update the current control based on its current state and host control logic."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIStateControl"
    ],
    "pageType": "api",
    "title": "DIStateControl",
    "section": "Properties",
    "route": "/api/di-controls/classes/DIStateControl",
    "fragment": "properties",
    "content": "Function that should be used to make control touched."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIStateControl"
    ],
    "pageType": "api",
    "title": "DIStateControl",
    "section": "Properties",
    "route": "/api/di-controls/classes/DIStateControl",
    "fragment": "properties",
    "content": "Control from which we have to update our model."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIStateControl"
    ],
    "pageType": "api",
    "title": "DIStateControl",
    "section": "Properties",
    "route": "/api/di-controls/classes/DIStateControl",
    "fragment": "properties",
    "content": "Value that will be used for the checked state. You can override it to transform it to @Input or to set value by default."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIStateControl"
    ],
    "pageType": "api",
    "title": "DIStateControl",
    "section": "Accessors",
    "route": "/api/di-controls/classes/DIStateControl",
    "fragment": "accessors",
    "content": "Returns true if the control is disabled."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIStateControl"
    ],
    "pageType": "api",
    "title": "DIStateControl",
    "section": "Accessors",
    "route": "/api/di-controls/classes/DIStateControl",
    "fragment": "accessors",
    "content": "Returns true if the control is not empty."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIStateControl"
    ],
    "pageType": "api",
    "title": "DIStateControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIStateControl",
    "fragment": "methods",
    "content": "Sets checked state"
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIStateControl"
    ],
    "pageType": "api",
    "title": "DIStateControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIStateControl",
    "fragment": "methods",
    "content": "Function catches updates from child controls and updates the current control model."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIStateControl"
    ],
    "pageType": "api",
    "title": "DIStateControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIStateControl",
    "fragment": "methods",
    "content": "control that was updated."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIStateControl"
    ],
    "pageType": "api",
    "title": "DIStateControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIStateControl",
    "fragment": "methods",
    "content": "new value."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIStateControl"
    ],
    "pageType": "api",
    "title": "DIStateControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIStateControl",
    "fragment": "methods",
    "content": "Sets intermediate state"
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIStateControl"
    ],
    "pageType": "api",
    "title": "DIStateControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIStateControl",
    "fragment": "methods",
    "content": "Registers provided control as a child of the current control."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIStateControl"
    ],
    "pageType": "api",
    "title": "DIStateControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIStateControl",
    "fragment": "methods",
    "content": "control that will be registered."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIStateControl"
    ],
    "pageType": "api",
    "title": "DIStateControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIStateControl",
    "fragment": "methods",
    "content": "Method is called by the forms API."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIStateControl"
    ],
    "pageType": "api",
    "title": "DIStateControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIStateControl",
    "fragment": "methods",
    "content": "callback function to register on value change"
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIStateControl"
    ],
    "pageType": "api",
    "title": "DIStateControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIStateControl",
    "fragment": "methods",
    "content": "Registers provided function as a callback that will be called when the current control changes. This function will be provided by the host control to update its model."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIStateControl"
    ],
    "pageType": "api",
    "title": "DIStateControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIStateControl",
    "fragment": "methods",
    "content": "callback function."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIStateControl"
    ],
    "pageType": "api",
    "title": "DIStateControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIStateControl",
    "fragment": "methods",
    "content": "Method is called by the forms API."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIStateControl"
    ],
    "pageType": "api",
    "title": "DIStateControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIStateControl",
    "fragment": "methods",
    "content": "callback function to register on touch"
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIStateControl"
    ],
    "pageType": "api",
    "title": "DIStateControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIStateControl",
    "fragment": "methods",
    "content": "Registers provided function as a callback that can be called to request an update from the host control. After calling this function the host control will update the model of the current control based on the current state of the control and host control logic."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIStateControl"
    ],
    "pageType": "api",
    "title": "DIStateControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIStateControl",
    "fragment": "methods",
    "content": "callback function."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIStateControl"
    ],
    "pageType": "api",
    "title": "DIStateControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIStateControl",
    "fragment": "methods",
    "content": "Method is called by the forms API to write to the view when programmatic changes from model to view are requested."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIStateControl"
    ],
    "pageType": "api",
    "title": "DIStateControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIStateControl",
    "fragment": "methods",
    "content": "new value"
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIStateControl"
    ],
    "pageType": "api",
    "title": "DIStateControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIStateControl",
    "fragment": "methods",
    "content": "Toggles checked state"
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIStateControl"
    ],
    "pageType": "api",
    "title": "DIStateControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIStateControl",
    "fragment": "methods",
    "content": "Sets unchecked state"
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIStateControl"
    ],
    "pageType": "api",
    "title": "DIStateControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIStateControl",
    "fragment": "methods",
    "content": "Unregisters provided control from the current control."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIStateControl"
    ],
    "pageType": "api",
    "title": "DIStateControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIStateControl",
    "fragment": "methods",
    "content": "control that will be unregistered."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIStateControl"
    ],
    "pageType": "api",
    "title": "DIStateControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIStateControl",
    "fragment": "methods",
    "content": "Updates provided control with the provided value."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIStateControl"
    ],
    "pageType": "api",
    "title": "DIStateControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIStateControl",
    "fragment": "methods",
    "content": "control that will be updated."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIStateControl"
    ],
    "pageType": "api",
    "title": "DIStateControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIStateControl",
    "fragment": "methods",
    "content": "new value."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIStateControl"
    ],
    "pageType": "api",
    "title": "DIStateControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIStateControl",
    "fragment": "methods",
    "content": "Updates all child controls with the provided value."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIStateControl"
    ],
    "pageType": "api",
    "title": "DIStateControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIStateControl",
    "fragment": "methods",
    "content": "new value."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIStateControl"
    ],
    "pageType": "api",
    "title": "DIStateControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIStateControl",
    "fragment": "methods",
    "content": "Updates the model of the current control. This is the main method that should be used to update the model."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIStateControl"
    ],
    "pageType": "api",
    "title": "DIStateControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIStateControl",
    "fragment": "methods",
    "content": "new value."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIStateControl"
    ],
    "pageType": "api",
    "title": "DIStateControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIStateControl",
    "fragment": "methods",
    "content": "Method is called by the forms API to write to the view when programmatic changes from model to view are requested."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIStateControl"
    ],
    "pageType": "api",
    "title": "DIStateControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIStateControl",
    "fragment": "methods",
    "content": "Method is called by the host to update the value of the control."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIStateControl"
    ],
    "pageType": "api",
    "title": "DIStateControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIStateControl",
    "fragment": "methods",
    "content": "new value"
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIProxyControlConfig"
    ],
    "pageType": "api",
    "title": "DIProxyControlConfig",
    "section": "DIProxyControlConfig",
    "route": "/api/di-controls/interfaces/DIProxyControlConfig",
    "fragment": "diproxycontrolconfig",
    "content": "Configuration for the DIProxyControl."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIProxyControlConfig"
    ],
    "pageType": "api",
    "title": "DIProxyControlConfig",
    "section": "Properties",
    "route": "/api/di-controls/interfaces/DIProxyControlConfig",
    "fragment": "properties",
    "content": "Function that will be used to get value from the current object model and set it to the child control when update is requested."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIProxyControlConfig"
    ],
    "pageType": "api",
    "title": "DIProxyControlConfig",
    "section": "Properties",
    "route": "/api/di-controls/interfaces/DIProxyControlConfig",
    "fragment": "properties",
    "content": "Host control for the current control. It can be injected using DI_HOST_CONTROL token."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIProxyControlConfig"
    ],
    "pageType": "api",
    "title": "DIProxyControlConfig",
    "section": "Properties",
    "route": "/api/di-controls/interfaces/DIProxyControlConfig",
    "fragment": "properties",
    "content": "Function that will be called when the current control receives an update from the child control."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIProxyControlConfig"
    ],
    "pageType": "api",
    "title": "DIProxyControlConfig",
    "section": "Properties",
    "route": "/api/di-controls/interfaces/DIProxyControlConfig",
    "fragment": "properties",
    "content": "Function that will be called when the current control receives an update from the host control or from the Forms API."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIProxyControlConfig"
    ],
    "pageType": "api",
    "title": "DIProxyControlConfig",
    "section": "Properties",
    "route": "/api/di-controls/interfaces/DIProxyControlConfig",
    "fragment": "properties",
    "content": "Function that will be used to set value to the object model when child control value is changed."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIProxyControl"
    ],
    "pageType": "api",
    "title": "DIProxyControl",
    "section": "DIProxyControl",
    "route": "/api/di-controls/classes/DIProxyControl",
    "fragment": "diproxycontrol",
    "content": "DIProxyControl is very suitable. It is typically used as a host and works exclusively with objects. It is necessary to bind child controls to a specific property of the object, thereby ensuring that they update only that specific property and not the entire object as a whole. Please see Date Range."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIProxyControl"
    ],
    "pageType": "api",
    "title": "DIProxyControl",
    "section": "Creating a control",
    "route": "/api/di-controls/classes/DIProxyControl",
    "fragment": "creating-a-control",
    "content": "To create a control you need to extend your @Component or @Directive from DIProxyControl class and provide getValue and setValue functions that will be used to get and set value from the object to the child control."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIProxyControl"
    ],
    "pageType": "api",
    "title": "DIProxyControl",
    "section": "Registering as a host",
    "route": "/api/di-controls/classes/DIProxyControl",
    "fragment": "registering-as-a-host",
    "content": "By default your control can work only with NgModel and FormControl. But you can register your control as a host for another controls, then your control will be able to update them and accept updates from them. To do that you need to use provideHostControl function."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIProxyControl"
    ],
    "pageType": "api",
    "title": "DIProxyControl",
    "section": "Injecting host control",
    "route": "/api/di-controls/classes/DIProxyControl",
    "fragment": "injecting-host-control",
    "content": "By default your control doesn't communicate with host controls. But you can inject host control and put it into super call. This will register your control in the host control and start communication between them."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIProxyControl"
    ],
    "pageType": "api",
    "title": "DIProxyControl",
    "section": "Injecting host control",
    "route": "/api/di-controls/classes/DIProxyControl",
    "fragment": "injecting-host-control",
    "content": "If you register your control as a host for another controls, then you can inject it only with skipSelf option."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIProxyControl"
    ],
    "pageType": "api",
    "title": "DIProxyControl",
    "section": "Getting model",
    "route": "/api/di-controls/classes/DIProxyControl",
    "fragment": "getting-model",
    "content": "To get model you need to use model property. It will return model for the current control."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIProxyControl"
    ],
    "pageType": "api",
    "title": "DIProxyControl",
    "section": "Updating model",
    "route": "/api/di-controls/classes/DIProxyControl",
    "fragment": "updating-model",
    "content": "To update model you need to call updateModel method. It will update model for the current control and all children controls, as well as for the NgModel or FormControl."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIProxyControl"
    ],
    "pageType": "api",
    "title": "DIProxyControl",
    "section": "Catching updates",
    "route": "/api/di-controls/classes/DIProxyControl",
    "fragment": "catching-updates",
    "content": "Sometimes you may need to catch updates from different sources. For example, to update the value of the native input element. To do this, you can provide the onIncomingUpdate hook."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIProxyControl"
    ],
    "pageType": "api",
    "title": "DIProxyControl",
    "section": "Properties",
    "route": "/api/di-controls/classes/DIProxyControl",
    "fragment": "properties",
    "content": "List of children controls."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIProxyControl"
    ],
    "pageType": "api",
    "title": "DIProxyControl",
    "section": "Properties",
    "route": "/api/di-controls/classes/DIProxyControl",
    "fragment": "properties",
    "content": "Request host for update the current control. Host will update the current control based on its current state and host control logic."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIProxyControl"
    ],
    "pageType": "api",
    "title": "DIProxyControl",
    "section": "Properties",
    "route": "/api/di-controls/classes/DIProxyControl",
    "fragment": "properties",
    "content": "Function that should be used to make control touched."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIProxyControl"
    ],
    "pageType": "api",
    "title": "DIProxyControl",
    "section": "Properties",
    "route": "/api/di-controls/classes/DIProxyControl",
    "fragment": "properties",
    "content": "Control from which we have to update our model."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIProxyControl"
    ],
    "pageType": "api",
    "title": "DIProxyControl",
    "section": "Accessors",
    "route": "/api/di-controls/classes/DIProxyControl",
    "fragment": "accessors",
    "content": "Returns true if the control is disabled."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIProxyControl"
    ],
    "pageType": "api",
    "title": "DIProxyControl",
    "section": "Accessors",
    "route": "/api/di-controls/classes/DIProxyControl",
    "fragment": "accessors",
    "content": "Returns true if the control is not empty."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIProxyControl"
    ],
    "pageType": "api",
    "title": "DIProxyControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIProxyControl",
    "fragment": "methods",
    "content": "Function catches updates from child controls and updates the current control model."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIProxyControl"
    ],
    "pageType": "api",
    "title": "DIProxyControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIProxyControl",
    "fragment": "methods",
    "content": "control that was updated."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIProxyControl"
    ],
    "pageType": "api",
    "title": "DIProxyControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIProxyControl",
    "fragment": "methods",
    "content": "new value."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIProxyControl"
    ],
    "pageType": "api",
    "title": "DIProxyControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIProxyControl",
    "fragment": "methods",
    "content": "Registers provided control as a child of the current control."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIProxyControl"
    ],
    "pageType": "api",
    "title": "DIProxyControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIProxyControl",
    "fragment": "methods",
    "content": "control that will be registered."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIProxyControl"
    ],
    "pageType": "api",
    "title": "DIProxyControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIProxyControl",
    "fragment": "methods",
    "content": "Method is called by the forms API."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIProxyControl"
    ],
    "pageType": "api",
    "title": "DIProxyControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIProxyControl",
    "fragment": "methods",
    "content": "callback function to register on value change"
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIProxyControl"
    ],
    "pageType": "api",
    "title": "DIProxyControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIProxyControl",
    "fragment": "methods",
    "content": "Registers provided function as a callback that will be called when the current control changes. This function will be provided by the host control to update its model."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIProxyControl"
    ],
    "pageType": "api",
    "title": "DIProxyControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIProxyControl",
    "fragment": "methods",
    "content": "callback function."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIProxyControl"
    ],
    "pageType": "api",
    "title": "DIProxyControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIProxyControl",
    "fragment": "methods",
    "content": "Method is called by the forms API."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIProxyControl"
    ],
    "pageType": "api",
    "title": "DIProxyControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIProxyControl",
    "fragment": "methods",
    "content": "callback function to register on touch"
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIProxyControl"
    ],
    "pageType": "api",
    "title": "DIProxyControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIProxyControl",
    "fragment": "methods",
    "content": "Registers provided function as a callback that can be called to request an update from the host control. After calling this function the host control will update the model of the current control based on the current state of the control and host control logic."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIProxyControl"
    ],
    "pageType": "api",
    "title": "DIProxyControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIProxyControl",
    "fragment": "methods",
    "content": "callback function."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIProxyControl"
    ],
    "pageType": "api",
    "title": "DIProxyControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIProxyControl",
    "fragment": "methods",
    "content": "Method is called by the forms API to write to the view when programmatic changes from model to view are requested."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIProxyControl"
    ],
    "pageType": "api",
    "title": "DIProxyControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIProxyControl",
    "fragment": "methods",
    "content": "new value"
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIProxyControl"
    ],
    "pageType": "api",
    "title": "DIProxyControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIProxyControl",
    "fragment": "methods",
    "content": "Unregisters provided control from the current control."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIProxyControl"
    ],
    "pageType": "api",
    "title": "DIProxyControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIProxyControl",
    "fragment": "methods",
    "content": "control that will be unregistered."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIProxyControl"
    ],
    "pageType": "api",
    "title": "DIProxyControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIProxyControl",
    "fragment": "methods",
    "content": "Updates provided control with the provided value."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIProxyControl"
    ],
    "pageType": "api",
    "title": "DIProxyControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIProxyControl",
    "fragment": "methods",
    "content": "control that will be updated."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIProxyControl"
    ],
    "pageType": "api",
    "title": "DIProxyControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIProxyControl",
    "fragment": "methods",
    "content": "new value."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIProxyControl"
    ],
    "pageType": "api",
    "title": "DIProxyControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIProxyControl",
    "fragment": "methods",
    "content": "Updates all child controls with the provided value."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIProxyControl"
    ],
    "pageType": "api",
    "title": "DIProxyControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIProxyControl",
    "fragment": "methods",
    "content": "new value."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIProxyControl"
    ],
    "pageType": "api",
    "title": "DIProxyControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIProxyControl",
    "fragment": "methods",
    "content": "Updates the model of the current control. This is the main method that should be used to update the model."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIProxyControl"
    ],
    "pageType": "api",
    "title": "DIProxyControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIProxyControl",
    "fragment": "methods",
    "content": "new value."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIProxyControl"
    ],
    "pageType": "api",
    "title": "DIProxyControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIProxyControl",
    "fragment": "methods",
    "content": "Method is called by the forms API to write to the view when programmatic changes from model to view are requested."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIProxyControl"
    ],
    "pageType": "api",
    "title": "DIProxyControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIProxyControl",
    "fragment": "methods",
    "content": "Method is called by the host to update the value of the control."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIProxyControl"
    ],
    "pageType": "api",
    "title": "DIProxyControl",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIProxyControl",
    "fragment": "methods",
    "content": "new value"
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControlSilencerDirective"
    ],
    "pageType": "api",
    "title": "DIControlSilencerDirective",
    "section": "DIControlSilencerDirective",
    "route": "/api/di-controls/classes/DIControlSilencerDirective",
    "fragment": "dicontrolsilencerdirective"
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControlSilencerDirective"
    ],
    "pageType": "api",
    "title": "DIControlSilencerDirective",
    "section": "Properties",
    "route": "/api/di-controls/classes/DIControlSilencerDirective",
    "fragment": "properties",
    "content": "List of children controls."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControlSilencerDirective"
    ],
    "pageType": "api",
    "title": "DIControlSilencerDirective",
    "section": "Properties",
    "route": "/api/di-controls/classes/DIControlSilencerDirective",
    "fragment": "properties",
    "content": "Request host for update the current control. Host will update the current control based on its current state and host control logic."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControlSilencerDirective"
    ],
    "pageType": "api",
    "title": "DIControlSilencerDirective",
    "section": "Properties",
    "route": "/api/di-controls/classes/DIControlSilencerDirective",
    "fragment": "properties",
    "content": "Function that should be used to make control touched."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControlSilencerDirective"
    ],
    "pageType": "api",
    "title": "DIControlSilencerDirective",
    "section": "Properties",
    "route": "/api/di-controls/classes/DIControlSilencerDirective",
    "fragment": "properties",
    "content": "Control from which we have to update our model."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControlSilencerDirective"
    ],
    "pageType": "api",
    "title": "DIControlSilencerDirective",
    "section": "Accessors",
    "route": "/api/di-controls/classes/DIControlSilencerDirective",
    "fragment": "accessors",
    "content": "Returns true if the control is disabled."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControlSilencerDirective"
    ],
    "pageType": "api",
    "title": "DIControlSilencerDirective",
    "section": "Accessors",
    "route": "/api/di-controls/classes/DIControlSilencerDirective",
    "fragment": "accessors",
    "content": "Returns true if the control is not empty."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControlSilencerDirective"
    ],
    "pageType": "api",
    "title": "DIControlSilencerDirective",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIControlSilencerDirective",
    "fragment": "methods",
    "content": "Function catches updates from child controls and updates the current control model."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControlSilencerDirective"
    ],
    "pageType": "api",
    "title": "DIControlSilencerDirective",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIControlSilencerDirective",
    "fragment": "methods",
    "content": "control that was updated."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControlSilencerDirective"
    ],
    "pageType": "api",
    "title": "DIControlSilencerDirective",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIControlSilencerDirective",
    "fragment": "methods",
    "content": "new value."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControlSilencerDirective"
    ],
    "pageType": "api",
    "title": "DIControlSilencerDirective",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIControlSilencerDirective",
    "fragment": "methods",
    "content": "Registers provided control as a child of the current control."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControlSilencerDirective"
    ],
    "pageType": "api",
    "title": "DIControlSilencerDirective",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIControlSilencerDirective",
    "fragment": "methods",
    "content": "Method is called by the forms API."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControlSilencerDirective"
    ],
    "pageType": "api",
    "title": "DIControlSilencerDirective",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIControlSilencerDirective",
    "fragment": "methods",
    "content": "callback function to register on value change"
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControlSilencerDirective"
    ],
    "pageType": "api",
    "title": "DIControlSilencerDirective",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIControlSilencerDirective",
    "fragment": "methods",
    "content": "Registers provided function as a callback that will be called when the current control changes. This function will be provided by the host control to update its model."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControlSilencerDirective"
    ],
    "pageType": "api",
    "title": "DIControlSilencerDirective",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIControlSilencerDirective",
    "fragment": "methods",
    "content": "callback function."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControlSilencerDirective"
    ],
    "pageType": "api",
    "title": "DIControlSilencerDirective",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIControlSilencerDirective",
    "fragment": "methods",
    "content": "Method is called by the forms API."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControlSilencerDirective"
    ],
    "pageType": "api",
    "title": "DIControlSilencerDirective",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIControlSilencerDirective",
    "fragment": "methods",
    "content": "callback function to register on touch"
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControlSilencerDirective"
    ],
    "pageType": "api",
    "title": "DIControlSilencerDirective",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIControlSilencerDirective",
    "fragment": "methods",
    "content": "Registers provided function as a callback that can be called to request an update from the host control. After calling this function the host control will update the model of the current control based on the current state of the control and host control logic."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControlSilencerDirective"
    ],
    "pageType": "api",
    "title": "DIControlSilencerDirective",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIControlSilencerDirective",
    "fragment": "methods",
    "content": "callback function."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControlSilencerDirective"
    ],
    "pageType": "api",
    "title": "DIControlSilencerDirective",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIControlSilencerDirective",
    "fragment": "methods",
    "content": "Method is called by the forms API to write to the view when programmatic changes from model to view are requested."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControlSilencerDirective"
    ],
    "pageType": "api",
    "title": "DIControlSilencerDirective",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIControlSilencerDirective",
    "fragment": "methods",
    "content": "new value"
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControlSilencerDirective"
    ],
    "pageType": "api",
    "title": "DIControlSilencerDirective",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIControlSilencerDirective",
    "fragment": "methods",
    "content": "Unregisters provided control from the current control."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControlSilencerDirective"
    ],
    "pageType": "api",
    "title": "DIControlSilencerDirective",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIControlSilencerDirective",
    "fragment": "methods",
    "content": "Updates provided control with the provided value."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControlSilencerDirective"
    ],
    "pageType": "api",
    "title": "DIControlSilencerDirective",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIControlSilencerDirective",
    "fragment": "methods",
    "content": "control that will be updated."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControlSilencerDirective"
    ],
    "pageType": "api",
    "title": "DIControlSilencerDirective",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIControlSilencerDirective",
    "fragment": "methods",
    "content": "new value."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControlSilencerDirective"
    ],
    "pageType": "api",
    "title": "DIControlSilencerDirective",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIControlSilencerDirective",
    "fragment": "methods",
    "content": "Updates all child controls with the provided value."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControlSilencerDirective"
    ],
    "pageType": "api",
    "title": "DIControlSilencerDirective",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIControlSilencerDirective",
    "fragment": "methods",
    "content": "new value."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControlSilencerDirective"
    ],
    "pageType": "api",
    "title": "DIControlSilencerDirective",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIControlSilencerDirective",
    "fragment": "methods",
    "content": "Updates the model of the current control. This is the main method that should be used to update the model."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControlSilencerDirective"
    ],
    "pageType": "api",
    "title": "DIControlSilencerDirective",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIControlSilencerDirective",
    "fragment": "methods",
    "content": "new value."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControlSilencerDirective"
    ],
    "pageType": "api",
    "title": "DIControlSilencerDirective",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIControlSilencerDirective",
    "fragment": "methods",
    "content": "Method is called by the forms API to write to the view when programmatic changes from model to view are requested."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControlSilencerDirective"
    ],
    "pageType": "api",
    "title": "DIControlSilencerDirective",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIControlSilencerDirective",
    "fragment": "methods",
    "content": "Method is called by the host to update the value of the control."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIControlSilencerDirective"
    ],
    "pageType": "api",
    "title": "DIControlSilencerDirective",
    "section": "Methods",
    "route": "/api/di-controls/classes/DIControlSilencerDirective",
    "fragment": "methods",
    "content": "new value"
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "provideHostControl"
    ],
    "pageType": "api",
    "title": "provideHostControl",
    "section": "provideHostControl",
    "route": "/api/di-controls/functions/provideHostControl",
    "fragment": "providehostcontrol",
    "content": "Returns provider that can be used to provide host control. You can use it in the providers section of your @Component or @Directive."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "provideHostControl"
    ],
    "pageType": "api",
    "title": "provideHostControl",
    "section": "Parameters",
    "route": "/api/di-controls/functions/provideHostControl",
    "fragment": "parameters",
    "content": "The @Component or @Directive class that should be used as a host control."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "injectHostControl"
    ],
    "pageType": "api",
    "title": "injectHostControl",
    "section": "injectHostControl",
    "route": "/api/di-controls/functions/injectHostControl",
    "fragment": "injecthostcontrol",
    "content": "Injects host control. You can use it in the constructor of your @Component or @Directive."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "injectHostControl"
    ],
    "pageType": "api",
    "title": "injectHostControl",
    "section": "injectHostControl",
    "route": "/api/di-controls/functions/injectHostControl1",
    "fragment": "injecthostcontrol",
    "content": "Injects host control. You can use it in the constructor of your @Component or @Directive."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "injectHostControl"
    ],
    "pageType": "api",
    "title": "injectHostControl",
    "section": "injectHostControl",
    "route": "/api/di-controls/functions/injectHostControl2",
    "fragment": "injecthostcontrol",
    "content": "Injects host control. You can use it in the constructor of your @Component or @Directive."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "injectHostControl"
    ],
    "pageType": "api",
    "title": "injectHostControl",
    "section": "injectHostControl",
    "route": "/api/di-controls/functions/injectHostControl3",
    "fragment": "injecthostcontrol",
    "content": "Injects host control. You can use it in the constructor of your @Component or @Directive."
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DICompareFunction"
    ],
    "pageType": "api",
    "title": "DICompareFunction",
    "section": "DICompareFunction",
    "route": "/api/di-controls/type-aliases/DICompareFunction",
    "fragment": "dicomparefunction"
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "ComponentType"
    ],
    "pageType": "api",
    "title": "ComponentType",
    "section": "ComponentType",
    "route": "/api/di-controls/interfaces/ComponentType",
    "fragment": "componenttype"
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIProxyControlGetValue"
    ],
    "pageType": "api",
    "title": "DIProxyControlGetValue",
    "section": "DIProxyControlGetValue",
    "route": "/api/di-controls/type-aliases/DIProxyControlGetValue",
    "fragment": "diproxycontrolgetvalue"
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "DIProxyControlSetValue"
    ],
    "pageType": "api",
    "title": "DIProxyControlSetValue",
    "section": "DIProxyControlSetValue",
    "route": "/api/di-controls/type-aliases/DIProxyControlSetValue",
    "fragment": "diproxycontrolsetvalue"
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "AbstractConstructor"
    ],
    "pageType": "api",
    "title": "AbstractConstructor",
    "section": "AbstractConstructor",
    "route": "/api/di-controls/type-aliases/AbstractConstructor",
    "fragment": "abstractconstructor"
  },
  {
    "breadcrumbs": [
      "API",
      "di-controls",
      "Constructor"
    ],
    "pageType": "api",
    "title": "Constructor",
    "section": "Constructor",
    "route": "/api/di-controls/type-aliases/Constructor",
    "fragment": "constructor"
  }
]