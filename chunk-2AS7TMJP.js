import{$ as u,Fb as m,Gb as f,Hb as w,J as p,M as d,S as a,U as l,_ as g,c as v,f as y,ya as b}from"./chunk-MQXCTTB7.js";function h(n){n||(l(h),n=a(u));let e=new v(t=>n.onDestroy(t.next.bind(t)));return t=>t.pipe(p(e))}function k(n,e){!e?.injector&&l(k);let t=e?.injector??a(g),s=new y(1),c=w(()=>{let r;try{r=n()}catch(i){f(()=>s.error(i));return}f(()=>s.next(r))},{injector:t,manualCleanup:!0});return t.get(u).onDestroy(()=>{c.destroy(),s.complete()}),s.asObservable()}function x(n,e){let t=!e?.manualCleanup;t&&!e?.injector&&l(x);let s=t?e?.injector?.get(u)??a(u):null,c=j(e?.equal),r;e?.requireSync?r=b({kind:0},{equal:c}):r=b({kind:1,value:e?.initialValue},{equal:c});let i=n.subscribe({next:o=>r.set({kind:1,value:o}),error:o=>{if(e?.rejectErrors)throw o;r.set({kind:2,error:o})}});if(e?.requireSync&&r().kind===0)throw new d(601,!1);return s?.onDestroy(i.unsubscribe.bind(i)),m(()=>{let o=r();switch(o.kind){case 1:return o.value;case 2:throw o.error;case 0:throw new d(601,!1)}},{equal:e?.equal})}function j(n=Object.is){return(e,t)=>e.kind===1&&t.kind===1&&n(e.value,t.value)}export{h as a,k as b,x as c};
